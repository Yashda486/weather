{"version":3,"sources":["Weather.js","App.jsx","reportWebVitals.js","index.js"],"names":["day","weekday","Array","Date","getDay","toUpperCase","date","m","getMonth","getDate","App","a","useState","city","setcity","search","setsearch","useEffect","url","fetch","response","json","resJson","main","fetchApi","className","style","color","type","id","value","e","target","temp","class","toLocaleTimeString","temp_min","temp_max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAMA,EAAI,WACN,IAAIC,EAAQ,IAAIC,MAAM,GAUtB,OATAD,EAAQ,GAAG,MACXA,EAAQ,GAAG,MACXA,EAAQ,GAAG,MACXA,EAAQ,GAAG,MACXA,EAAQ,GAAG,MACXA,EAAQ,GAAG,MACXA,EAAQ,GAAG,MAELA,GADA,IAAIE,MACMC,UAAUC,eAG1BC,EAAK,WACL,IAAIA,EAAM,IAAIH,KAEVI,EADM,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,MAAM,MAAM,OAClED,EAAKE,YAAYH,cAE7B,OADMC,EAAKG,UACF,IAAIF,GCiEFG,EAhFH,WAAO,IAAD,EDsBNC,ECnBV,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAiBA,OAXAC,qBAAU,YACM,uCAAG,gCAAAN,EAAA,6DACTO,EADS,4DACkDH,EADlD,iEAEQI,MAAMD,GAFd,cAETE,EAFS,gBAGOA,EAASC,OAHhB,OAGTC,EAHS,OAIfR,EAAQQ,EAAQC,MAJD,2CAAH,qDAMdC,KACC,CAACT,IAIF,mCACE,sBAAKU,UAAU,sBAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,oBAAIA,UAAU,qBAAqBC,MAAO,CAACC,MAAM,SAAjD,kCAGJ,qBAAKF,UAAU,MAAf,SACE,qBAAKA,UAAU,0CAAf,SACE,qBAAKA,UAAU,oBAAf,SACE,0BAAOA,UAAU,sBACfG,KAAK,SACLC,GAAG,QAAQC,MAAOf,GAFpB,0BAIY,gBAJZ,0BA1BZ,SAAegB,GACbf,EAAUe,EAAEC,OAAOF,UAyBT,4BAK+B,0BAL/B,UAYN,qBAAKL,UAAU,MAAf,SACE,qBAAKA,UAAU,wBAAf,SACAZ,EAII,sBAAKY,UAAU,OAAf,UACE,qBAAIA,UAAU,gBAAd,UACE,6BD9BNd,EC8BiBE,EAAKoB,KD7B3BtB,GAAG,GACK,mBAAGuB,MAAM,mBAAmBR,MAAO,CAACC,MAAM,eAE7ChB,EAAE,IAAMA,GAAG,GACP,mBAAGuB,MAAM,0BAA0BR,MAAO,CAACC,MAAM,cAIlD,mBAAGO,MAAM,mCAAmCR,MAAO,CAACC,MAAM,mBCsBvD,mBAAGF,UAAU,qBAAqBC,MAAO,CAACC,MAAM,WAChD,sBAAMF,UAAU,OAAhB,SAAwBV,OAE1B,qBAAIU,UAAU,wBAAd,UAAuCzB,IAAvC,MAAiDM,IAAjD,ODtCH,IAAIH,MACFgC,wBCsCE,qBAAIV,UAAU,wBAAd,UACEZ,EAAKoB,KACN,oCAFD,SAKD,qBAAIR,UAAU,8BAAd,mBACSZ,EAAKuB,SACZ,oCAFF,eAE2BvB,EAAKwB,SAC9B,oCAHF,YAfF,mBAAGZ,UAAU,YAAb,qCCtCCa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.500b95f8.chunk.js","sourcesContent":["const day=()=>{\r\n    var weekday=new Array(7);\r\n    weekday[0]=\"Sun\";\r\n    weekday[1]=\"Mon\";\r\n    weekday[2]=\"Tue\";\r\n    weekday[3]=\"Wed\";\r\n    weekday[4]=\"Thu\";\r\n    weekday[5]=\"Fri\";\r\n    weekday[6]=\"Sat\";\r\n    var d=new Date();\r\n    let a=weekday[d.getDay()].toUpperCase();\r\n    return a;\r\n}\r\nvar date=()=>{\r\n    let date =new Date();\r\n    var month=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"]\r\n    var m=month[date.getMonth()].toUpperCase();\r\n    var n=date.getDate();\r\n    return n+\" \"+m;\r\n}\r\nvar time=()=>{\r\n    let date=new Date();\r\n    let f=date.toLocaleTimeString();\r\n    return f;\r\n}\r\nvar change=(a)=>{\r\n    if(a>=21){\r\n        return <i class=\"fas fa-sun fa-2x\" style={{color:\"orangered\"}}></i>;\r\n    }\r\n    else if(a<21 && a>=13){\r\n        return  <i class=\"fas fa-cloud-rain fa-2x\" style={{color:\"darkblue\"}}></i>;\r\n   \r\n    }\r\n    else {\r\n        return <i class=\"fas fa-cloud-showers-heavy fa-2x\" style={{color:\"aquamarine\"}}></i>;\r\n        \r\n    }    }\r\n\r\n\r\nexport {day,date,time,change};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {day,date,time,change} from './Weather';\r\n\r\nconst App = () => {\r\n  \r\n\r\n  const [city, setcity] = useState(\"\");\r\n  const [search, setsearch] = useState(\"\");\r\n  \r\n  function input(e) {\r\n    setsearch(e.target.value);\r\n  }\r\n  \r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=7bc369b1dda87f9ec236202071f3f23c`;\r\n      const response = await fetch(url);\r\n      const resJson = await response.json();\r\n      setcity(resJson.main);\r\n    };\r\n    fetchApi();\r\n  }, [search]);\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid mid\">\r\n        <div className=\"row \">\r\n          <div className=\"col-lg-12\">\r\n            <h1 className=\"y mt-5 text-center\" style={{color:\"coral\"}}>Weather Forecast</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"input-group justify-content-center mt-4\">\r\n            <div className=\"form-outline mt-4\">\r\n              <input className=\"pt-2 pb-2 pr-1 pl-1\"\r\n                type=\"search\"\r\n                id=\"form1\" value={search}\r\n                // eslint-disable-next-line react/jsx-no-duplicate-props\r\n                className=\"form-control\"\r\n                onChange={input} placeholder=\"Enter state or country\" \r\n              />\r\n            </div>\r\n  \r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"row\">\r\n          <div className=\"col-lg-12 text-center\">\r\n        {!city ? (\r\n              <p className=\"mt-5 yash\">No Data Found</p>\r\n            ) : (\r\n          \r\n              <div className=\"info\">\r\n                <h2 className=\"location mt-2\">\r\n                  <p>{change(city.temp)}</p>\r\n                  <i className=\"fas fa-street-view\" style={{color:\"white\"}}></i>\r\n                  <span className=\"yash\">{search}</span>\r\n                </h2>\r\n                <h3 className=\"text-center mt-3 yash\">{day()} | {date()} | {time()}</h3> \r\n                 <h1 className=\"temperature mt-3 yash\">\r\n                  {city.temp}\r\n                  <sup>o</sup>cel\r\n                </h1>\r\n               \r\n                <h4 className=\"temp_max_min mt-4 mb-4 yash\">\r\n                  Min : {city.temp_min}\r\n                  <sup>o</sup>cel | Max : {city.temp_max}\r\n                  <sup>o</sup>cel\r\n                </h4>\r\n              </div>\r\n            )}\r\n            </div>\r\n        </div>\r\n      </div>\r\n      \r\n    </>\r\n    \r\n  );\r\n  \r\n};\r\n\r\n\r\nexport default App;\r\n//api.openweathermap.org/data/2.5/weather?q=Pune&units=metric&appid=73d2373ea3e9d249f3398806280e06ec","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}